{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RedRunner Tiny, fast, simple and powerful JavaScript framework. Tiny RedRunner produces absloutely tiny bundles. Size of identical benchmark app Sizes of minified and gzipped bundle of non-keyed implementations of the js-framework-benchmark app. RedRunner and Svelte both use compilation to hit those sizes, but differ in just about every other design choice. Fast It is also among the fastest frameworks out there. Results for create 10,000 rows test Geometric mean over 10 runs using non-keyed implementation of js-framework-benchmark (run locally). Of course, high scores on benchmarks won't necessarily prevent or solve real world performance issues. Simple You can learn RedRunner in under an hour. Not just how to use it, but also how it works. RedRunner's internals are so simple you can always tell exactly how, when and why every single DOM element gets updated. The tutorial covers all you need to know. Powerful Most operations include a seamless, granular and progressive manual override features. You can literraly do anything you'd want to do in a web app, all without breaking out of the framework. You can use this power to optimize performance , bundle size or code reuse and readability . /** * Script to draw the little stats tables. * * Get stats from https://github.com/krausest/js-framework-benchmark (non-keyed) */ var frameworkStats = [ { framework: 'angular', createRows: 2354, size: 38.26 }, { framework: 'inferno', createRows: 1800, size: 8.9 }, { framework: 'react', createRows: 2886, size: 38.33 }, { framework: 'redrunner', createRows: 1846, size: 3.8 }, { framework: 'riot', createRows: 2263, size: 7.23 }, { framework: 'svelte', createRows: 2167, size: 2.96 }, { framework: 'vanillajs', createRows: 1653, size: 2.17 }, { framework: 'vue-next', createRows: 1967, size: 20.3 } ]; function dynamicSort(property) { return function (a, b) { return a[property] < b[property] ? -1 : (a[property] > b[property] ? 1 : 0); } } function calcPercentage(partialValue, totalValue) { return Math.round((100 * partialValue) / totalValue); } function drawChart(data, key, divId, unit) { var sorted = data.sort(dynamicSort(key)); var highest = sorted[sorted.length - 1][key]; console.log(highest) var table = '<table class=\"stats-table\"><tbody>'; sorted.forEach(function(entry) { console.log(entry) var percentage = calcPercentage(entry[key], highest); var percentageBar = '<div class=\"percentage-bar\" style=\"width:' + percentage + '%;\"></div>'; var percentageBarContainer = '<div class=\"percentage-bar-container\">' + percentageBar + '</div>'; var frameworkTd = '<td>' + entry.framework + '</td>'; var percentageTd = '<td>' + percentageBarContainer + '</td>'; var valueTd = '<td>' + entry[key] + unit + '</td>'; var row = '<tr class=\"stats-row\">' + frameworkTd + percentageTd + valueTd + '</tr>'; table += row; }) table += '</tbody></table>' var div = document.getElementById(divId); div.innerHTML = table; } drawChart(frameworkStats, \"createRows\", \"framework_speed_chart\", \"ms\") drawChart(frameworkStats, \"size\", \"framework_size_chart\", \" kB\")","title":"Home"},{"location":"tutorial/","text":"Tutorial","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"}]}